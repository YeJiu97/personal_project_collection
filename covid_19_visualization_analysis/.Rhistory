theme_minimal()
# 筛选出日期为最新且人口密度和每百万人口总病例数都不为NA的数据
filtered_data <- subset(owid_covid_data, !is.na(population_density) & !is.na(total_cases_per_million))
# 获取最新日期
latest_date <- max(filtered_data$date)
# 根据最新日期筛选数据
filtered_data <- subset(filtered_data, date == latest_date)
# 绘制气泡图
ggplot(filtered_data, aes(x = population_density, y = total_cases_per_million, color = continent, size = total_cases)) +
geom_point(alpha = 0.7) +
labs(x = "人口密度", y = "每百万人口总病例数", title = "人口密度与每百万人口总病例数之间的关系") +
scale_size_continuous(name = "总病例数", labels = scales::comma) +
theme_minimal()
filtered_data <- subset(owid_covid_data, !is.na(population_density) & !is.na(total_cases_per_million))
# 获取最新日期
latest_date <- max(filtered_data$date)
# 根据最新日期筛选数据
filtered_data <- subset(filtered_data, date == latest_date)
# 绘制散点图，添加抖动效果
ggplot(filtered_data, aes(x = population_density, y = total_cases_per_million, color = continent)) +
geom_point(size = 3, position = position_jitter(width = 0.1, height = 0.1)) +
labs(x = "人口密度", y = "每百万人口总病例数", title = "人口密度与每百万人口总病例数之间的关系") +
theme_minimal()
filtered_data <- subset(owid_covid_data, !is.na(population_density) & !is.na(new_cases_per_million))
# 获取最新日期
latest_date <- max(filtered_data$date)
# 根据最新日期筛选数据
filtered_data <- subset(filtered_data, date == latest_date)
# 绘制散点图，添加抖动效果
ggplot(filtered_data, aes(x = population_density, y = new_cases_per_million, color = continent)) +
geom_point(size = 3, position = position_jitter(width = 0.1, height = 0.1)) +
labs(x = "人口密度", y = "每百万人口总病例数", title = "人口密度与每百万人口总病例数之间的关系") +
theme_minimal()
# 绘制散点图，添加抖动效果
ggplot(filtered_data, aes(x = population_density, y = total_cases_per_million, color = continent)) +
geom_point(size = 3, position = position_jitter(width = 0.1, height = 0.1)) +
labs(x = "Population Density", y = "Total Cases per Million", title = "Total Case per Million v.s Population Density") +
theme_minimal()
filtered_data <- subset(owid_covid_data, !is.na(population_density) & !is.na(total_cases_per_million))
# 获取最新日期
latest_date <- max(filtered_data$date)
# 根据最新日期筛选数据
filtered_data <- subset(filtered_data, date == latest_date)
# 绘制散点图，添加抖动效果
ggplot(filtered_data, aes(x = population_density, y = total_cases_per_million, color = continent)) +
geom_point(size = 3, position = position_jitter(width = 0.1, height = 0.1)) +
labs(x = "Population Density", y = "Total Cases per Million", title = "Total Case per Million v.s Population Density") +
theme_minimal()
View(owid_covid_data)
filtered_vac_data <- subset(owid_covid_data, !is.na(total_vaccination_per_hundred) & !is.na(total_cases_per_million))
filtered_vac_data <- subset(owid_covid_data, !is.na(total_vaccinations_per_hundred) & !is.na(total_cases_per_million))
# 获取最新日期
latest_vac_date <- max(filtered_vac_data$date)
filtered_vac_data <- subset(owid_covid_data, !is.na(total_vaccinations_per_hundred) & !is.na(total_cases_per_million))
# 获取最新日期
latest_vac_date <- max(filtered_vac_data$date)
# 根据最新日期筛选数据
filtered_vac_data <- subset(filtered_data, date == latest_date)
# 绘制散点图，添加抖动效果
ggplot(filtered_vac_data, aes(x = total_vaccinations_per_hundred, y = total_cases_per_million, color = continent)) +
geom_point(size = 3, position = position_jitter(width = 0.1, height = 0.1)) +
labs(x = "Population Density", y = "Total Cases per Million", title = "Total Case per Million v.s Population Density") +
theme_minimal()
filtered_vac_data <- subset(owid_covid_data, !is.na(total_vaccinations_per_hundred) & !is.na(total_cases_per_million))
# 获取最新日期
latest_vac_date <- max(filtered_vac_data$date)
# 根据最新日期筛选数据
filtered_vac_data <- subset(filtered_data, date == latest_date)
# 绘制散点图，添加抖动效果
ggplot(filtered_vac_data, aes(x = total_vaccinations_per_hundred, y = total_cases_per_million, color = continent)) +
geom_point(size = 3, position = position_jitter(width = 0.1, height = 0.1)) +
labs(x = "total_vaccinations_per_hundred", y = "Total Cases per Million", title = "Total Case per Million v.s Population Density") +
theme_minimal()
filtered_vac_data <- subset(owid_covid_data, !is.na(total_vaccinations_per_hundred) & !is.na(total_cases_per_million))
# 获取最新日期
latest_vac_date <- max(filtered_vac_data$date)
# 根据最新日期筛选数据
filtered_vac_data <- subset(filtered_data, date == latest_date)
# 绘制散点图，添加抖动效果
ggplot(filtered_vac_data, aes(x = total_vaccinations_per_hundred, y = total_cases_per_million, color = continent)) +
geom_point(size = 3, position = position_jitter(width = 0.1, height = 0.1)) +
labs(x = "total_vaccinations_per_hundred", y = "Total Cases per Million", title = "Total Case per Million v.s Population Density") +
theme_minimal()
# total case per Million
filtered_vac_data <- subset(owid_covid_data, !is.na(total_vaccinations_per_hundred) & !is.na(total_cases_per_million))
# 获取最新日期
latest_vac_date <- max(filtered_vac_data$date)
# 根据最新日期筛选数据
filtered_vac_data <- subset(filtered_data, date == latest_date)
# 绘制散点图，添加抖动效果
ggplot(filtered_vac_data, aes(x = total_vaccinations_per_hundred, y = total_cases_per_million, color = continent)) +
geom_point(size = 3, position = position_jitter(width = 0.1, height = 0.1)) +
labs(x = "Total Vaccinations per Hundred", y = "Total Cases per Million", title = "Total Case per Million v.s Total Vaccinations per Hundred") +
theme_minimal()
# total case per Million
filtered_vac_data <- subset(owid_covid_data, !is.na(total_vaccinations_per_hundred) & !is.na(total_cases_per_million))
# 获取最新日期
latest_vac_date <- max(filtered_vac_data$date)
# 根据最新日期筛选数据
filtered_vac_data <- subset(filtered_vac_data, date == latest_date)
# 绘制散点图，添加抖动效果
ggplot(filtered_vac_data, aes(x = total_vaccinations_per_hundred, y = total_cases_per_million, color = continent)) +
geom_point(size = 3, position = position_jitter(width = 0.1, height = 0.1)) +
labs(x = "Total Vaccinations per Hundred", y = "Total Cases per Million", title = "Total Case per Million v.s Total Vaccinations per Hundred") +
theme_minimal()
# total case per Million
filtered_vac_data <- subset(owid_covid_data, !is.na(total_vaccinations_per_hundred) & !is.na(total_cases_per_million))
# 获取最新日期
latest_vac_date <- max(filtered_vac_data$date)
# 根据最新日期筛选数据
filtered_vac_data <- subset(filtered_vac_data, date == latest_date)
# 绘制散点图，添加抖动效果
ggplot(filtered_vac_data, aes(x = total_cases_per_million , y = total_vaccinations_per_hundred, color = continent)) +
geom_point(size = 3, position = position_jitter(width = 0.1, height = 0.1)) +
labs(x = "Total Vaccinations per Hundred", y = "Total Cases per Million", title = "Total Case per Million v.s Total Vaccinations per Hundred") +
theme_minimal()
# total case per Million
filtered_vac_data <- subset(owid_covid_data, !is.na(total_vaccinations_per_hundred) & !is.na(total_cases_per_million))
# 获取最新日期
latest_vac_date <- max(filtered_vac_data$date)
# 根据最新日期筛选数据
filtered_vac_data <- subset(filtered_vac_data, date == latest_date)
# 绘制散点图，添加抖动效果
ggplot(filtered_vac_data, aes(x = total_cases_per_million , y = total_vaccinations_per_hundred, color = continent)) +
geom_point(size = 3, position = position_jitter(width = 0.1, height = 0.1)) +
labs(x = "Total Cases per Million", y = "Total Vaccinations per Hundred", title = "Total Case per Million v.s Total Vaccinations per Hundred") +
theme_minimal()
View(filtered_vac_data)
# 选择特定国家的数据（以阿富汗为例）
country_data <- subset(owid_covid_data, location == "Afghanistan" & !is.na(gdp_per_capita) & !is.na(total_deaths_per_million))
# 绘制气泡图
ggplot(country_data, aes(x = gdp_per_capita, y = total_deaths_per_million, size = <related_data>)) +
# total case per Million
filtered_icu_data <- subset(owid_covid_data, !is.na(icu_patients_per_million) & !is.na(total_deaths))
# 获取最新日期
latest_icu_date <- max(filtered_icu_data)
# total case per Million
filtered_gdp_data <- subset(owid_covid_data, !is.na(gpd_per_capita) & !is.na(total_deaths))
# total case per Million
filtered_gdp_data <- subset(owid_covid_data, !is.na(gpd_per_capita) & !is.na(total_deaths))
# total case per Million
filtered_gdp_data <- subset(owid_covid_data, !is.na(gdp_per_capita) & !is.na(total_deaths))
# 获取最新日期
latest_gdp_date <- max(filtered_gdp_data)
View(filtered_gdp_data)
# 获取最新日期
latest_gdp_date <- max(filtered_gdp_data)
# 获取最新日期
latest_gdp_date <- max(filtered_gdp_data$date)
latest_gdp_date <- max(filtered_gdp_data)
# 筛选出不缺失的GDP人均和每百万人口死亡数数据
filtered_gdp_data <- subset(owid_covid_data, !is.na(gdp_per_capita) & !is.na(total_deaths))
# 获取最新日期
latest_gdp_date <- max(filtered_gdp_data$date)
# 根据最新日期筛选数据
latest_gdp_data <- subset(filtered_gdp_data, date == latest_gdp_date)
# 绘制气泡图
ggplot(latest_gdp_data, aes(x = gdp_per_capita, y = total_deaths_per_million, size = total_cases)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), name = "相关联数据") +
labs(x = "GDP人均", y = "每百万人口死亡数", title = paste("GDP人均与每百万人口死亡数之间的关系 -", latest_gdp_date)) +
theme_minimal()
# 筛选出不缺失的GDP人均和每百万人口死亡数数据
filtered_gdp_data <- subset(owid_covid_data, !is.na(gdp_per_capita) & !is.na(total_deaths))
# 获取最新日期
latest_gdp_date <- max(filtered_gdp_data$date)
# 根据最新日期筛选数据
latest_gdp_data <- subset(filtered_gdp_data, date == latest_gdp_date)
# 绘制气泡图
ggplot(latest_gdp_data, aes(x = gdp_per_capita, y = total_deaths_per_million, size = total_cases, color = continent)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), name = "相关联数据") +
labs(x = "GDP人均", y = "每百万人口死亡数", title = paste("GDP人均与每百万人口死亡数之间的关系 -", latest_gdp_date)) +
theme_minimal()
# 筛选出不缺失的GDP人均和每百万人口死亡数数据
filtered_gdp_data <- subset(owid_covid_data, !is.na(gdp_per_capita) & !is.na(total_deaths))
# 获取最新日期
latest_gdp_date <- max(filtered_gdp_data$date)
# 根据最新日期筛选数据
latest_gdp_data <- subset(filtered_gdp_data, date == latest_gdp_date)
# 绘制气泡图
ggplot(latest_gdp_data, aes(x = gdp_per_capita, y = total_deaths_per_million, size = total_cases, color = continent)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), name = "Total Cases") +
labs(x = "GDP人均", y = "total deaths per million", title = paste("The relationship between GDP per capita and total deaths per million", latest_gdp_date)) +
theme_minimal()
# 筛选出不缺失的GDP人均和每百万人口死亡数数据
filtered_gdp_data <- subset(owid_covid_data, !is.na(gdp_per_capita) & !is.na(total_deaths))
# 获取最新日期
latest_gdp_date <- max(filtered_gdp_data$date)
# 根据最新日期筛选数据
latest_gdp_data <- subset(filtered_gdp_data, date == latest_gdp_date)
# 绘制气泡图
ggplot(latest_gdp_data, aes(x = gdp_per_capita, y = total_deaths_per_million, size = total_cases, color = continent)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), name = "Total Cases") +
labs(x = "GDP per Capita", y = "total deaths per million", title = paste("The relationship between GDP per capita and total deaths per million", latest_gdp_date)) +
theme_minimal()
ggplot(latest_gdp_data, aes(x = gdp_per_capita, y = total_deaths_per_million)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), name = "Total Cases") +
labs(x = "GDP per Capita", y = "total deaths per million", title = paste("The relationship between GDP per capita and total deaths per million", latest_gdp_date)) +
theme_minimal()
ggplot(latest_gdp_data, aes(x = gdp_per_capita, y = total_deaths_per_million, size = total_cases_per_million, color = continent)) +
geom_point(alpha = 0.7) +
scale_size(range = c(1, 10), name = "Total Cases") +
labs(x = "GDP per Capita", y = "total deaths per million", title = paste("The relationship between GDP per capita and total deaths per million", latest_gdp_date)) +
theme_minimal()
# 选择与人口相关的指标和total_deaths列
population_related_variables <- c("population", "population_density", "median_age", "aged_65_older", "aged_70_older", "gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate", "diabetes_prevalence")
data <- owid_covid_data[, c(population_related_variables, "total_deaths")]
# 计算相关系数矩阵
correlation_matrix <- cor(data, use = "complete.obs")
# 提取与total_deaths相关的相关系数
correlation_with_total_deaths <- correlation_matrix["total_deaths", population_related_variables]
# 创建相关程度数据框
correlation_df <- data.frame(variable = names(correlation_with_total_deaths), correlation = as.numeric(correlation_with_total_deaths))
# 绘制相关程度图
ggplot(correlation_df, aes(x = variable, y = correlation)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Population Related Variables", y = "Correlation with Total Deaths") +
ggtitle("Correlation between Population Related Variables and Total Deaths") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# 选择与人口相关的指标和total_deaths列
population_related_variables <- c("population", "population_density", "median_age", "aged_65_older", "aged_70_older", "gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate", "diabetes_prevalence")
data <- owid_covid_data[, c(population_related_variables, "total_deaths")]
# 计算相关系数矩阵
correlation_matrix <- cor(data, use = "complete.obs")
# 提取与total_deaths相关的相关系数
correlation_with_total_deaths <- correlation_matrix["total_deaths", population_related_variables]
# 创建相关程度数据框
correlation_df <- data.frame(variable = names(correlation_with_total_deaths), correlation = as.numeric(correlation_with_total_deaths))
# 绘制相关程度图
ggplot(correlation_df, aes(x = variable, y = correlation)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Population Related Variables", y = "Correlation with Total Deaths") +
ggtitle("Correlation between Population Related Variables and Total Deaths") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# packages
library(corrplot)
population_related_variables <- c("population", "population_density", "median_age", "aged_65_older", "aged_70_older", "gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate", "diabetes_prevalence")
data <- owid_covid_data[, c(population_related_variables, "total_deaths")]
# 计算相关系数矩阵
correlation_matrix <- cor(data, use = "complete.obs")
# 绘制相关图
corrplot(correlation_matrix, method = "color", type = "upper",
tl.col = "black", tl.srt = 45, tl.cex = 0.8, diag = FALSE)
correlation_matrix
# 选择与人口相关的指标和total_deaths列
population_related_variables <- c("population", "population_density", "median_age", "aged_65_older", "aged_70_older", "gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate", "diabetes_prevalence")
data <- owid_covid_data[, c(population_related_variables, "total_deaths")]
# 计算相关系数矩阵
correlation_matrix <- cor(data, use = "complete.obs")
# 绘制相关图
corrplot.mixed(correlation_matrix, upper = "number", tl.col = "black", tl.srt = 45, tl.cex = 0.8, diag = FALSE, digits = 1)
# 绘制相关图
corrplot.mixed(correlation_matrix, upper = "number", tl.col = "black", tl.srt = 45, tl.cex = 0.8, diag = NULL, digits = 1)
# 绘制相关图
corrplot.mixed(correlation_matrix, upper = "number", tl.col = "black", tl.srt = 45, tl.cex = 0.8, diag = FALSE, digits = 1)
# 提取人口相关的指标和total_deaths列
population_related_vars <- owid_covid_data[, c("population", "population_density", "median_age", "aged_65_older", "aged_70_older", "gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate", "diabetes_prevalence")]
total_deaths <- owid_covid_data$total_deaths
# 计算相关系数矩阵
cor_matrix <- cor(population_related_vars, total_deaths, use="pairwise.complete.obs")
# 绘制热力图
heatmap(cor_matrix, col = colorRampPalette(c("#FEE5D9", "#FC9272", "#DE2D26"))(100),
main = "Correlation Heatmap",
xlab = "Variables", ylab = "total_deaths")
# 提取人口相关的指标和total_deaths列，并删除缺失值
population_related_vars <- na.omit(owid_covid_data[, c("population", "population_density", "median_age", "aged_65_older", "aged_70_older", "gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate", "diabetes_prevalence")])
total_deaths <- na.omit(owid_covid_data$total_deaths)
# 计算相关系数矩阵
cor_matrix <- cor(population_related_vars, total_deaths, use="pairwise.complete.obs")
# 提取人口相关的指标和total_deaths列，并删除缺失值
population_related_vars <- na.omit(owid_covid_data[, c("population", "population_density", "median_age", "aged_65_older", "aged_70_older", "gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate", "diabetes_prevalence")])
total_deaths <- na.omit(owid_covid_data$total_deaths)
# 计算相关系数矩阵
cor_matrix <- cor(population_related_vars, total_deaths, use="pairwise.complete.obs")
# 提取人口相关的指标和total_deaths列，并删除缺失值
population_related_vars <- na.omit(owid_covid_data[, c("population", "population_density", "median_age", "aged_65_older", "aged_70_older", "gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate", "diabetes_prevalence")])
total_deaths <- na.omit(owid_covid_data$total_deaths)
# 将total_deaths转换为单列的数据框
total_deaths <- data.frame(total_deaths)
# 计算相关系数矩阵
cor_matrix <- cor(population_related_vars, total_deaths, use = "pairwise.complete.obs")
library(reshape2)
population_vars <- c("population", "population_density", "median_age", "aged_65_older", "aged_70_older",
"gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate", "diabetes_prevalence")
# 提取所选指标的数据
population_data <- select(owid_covid_data, location, date, total_deaths, all_of(population_vars))
library(corrplot)
library(readr)
library(ggplot2)
library(dplyr)
library(maps)
library(tidyverse)
library(mapdata)
library(sf)
library(treemapify)
library(reshape2)
library(scales)  # 加载scales包以使用数字格式
population_vars <- c("population", "population_density", "median_age", "aged_65_older", "aged_70_older",
"gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate", "diabetes_prevalence")
# 提取所选指标的数据
population_data <- select(owid_covid_data, location, date, total_deaths, all_of(population_vars))
# 处理缺失值：删除包含缺失值的行
population_data <- na.omit(population_data)
# 计算相关系数矩阵
cor_matrix <- cor(population_data[, population_vars])
# 将相关系数矩阵转换为长格式数据框
cor_data <- melt(cor_matrix)
# 绘制热力图
ggplot(data = cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title = "Correlation Heatmap: Population Indicators vs. Total Deaths",
x = "Population Indicators",
y = "Population Indicators",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 选择与人口相关的指标和total_deaths
population_vars <- c("population", "population_density", "median_age", "aged_65_older", "aged_70_older",
"gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate", "diabetes_prevalence")
# 提取所选指标的数据
population_data <- select(owid_covid_data, location, date, total_deaths, all_of(population_vars))
# 处理缺失值：删除包含缺失值的行
population_data <- na.omit(population_data)
# 计算相关系数矩阵
cor_matrix <- cor(population_data[, population_vars])
# 将相关系数矩阵转换为长格式数据框
cor_data <- melt(cor_matrix)
# 绘制热力图
ggplot(data = cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(title = "Correlation Heatmap: Population Indicators vs. Total Deaths",
x = "Population Indicators",
y = "Population Indicators",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
cor_matrix
View(population_data)
# 选择与人口相关的指标和total_deaths
population_vars <- c("population", "population_density", "median_age", "aged_65_older",
"aged_70_older", "gdp_per_capita", "extreme_poverty",
"cardiovasc_death_rate", "diabetes_prevalence")
selected_vars <- c(population_vars, "total_deaths")
# 提取相关变量的数据
selected_data <- select(owid_covid_data, all_of(selected_vars))
# 去除包含缺失值的行
selected_data <- na.omit(selected_data)
# 计算相关性矩阵
cor_matrix <- cor(selected_data)
# 绘制热力图
heatmap.2(as.matrix(cor_matrix),
main = "Correlation Heatmap",
xlab = "Variables",
ylab = "Variables",
trace = "none",
col = colorRampPalette(c("blue", "white", "red"))(100))
library(tidyr)
library(dplyr)
library(ggplot2)
library(gplots)
# 选择与人口相关的指标和total_deaths
population_vars <- c("population", "population_density", "median_age", "aged_65_older",
"aged_70_older", "gdp_per_capita", "extreme_poverty",
"cardiovasc_death_rate", "diabetes_prevalence")
selected_vars <- c(population_vars, "total_deaths")
# 提取相关变量的数据
selected_data <- select(owid_covid_data, all_of(selected_vars))
# 去除包含缺失值的行
selected_data <- na.omit(selected_data)
# 计算相关性矩阵
cor_matrix <- cor(selected_data)
# 绘制热力图
heatmap.2(as.matrix(cor_matrix),
main = "Correlation Heatmap",
xlab = "Variables",
ylab = "Variables",
trace = "none",
col = colorRampPalette(c("blue", "white", "red"))(100))
# 选择与人口相关的指标和total_deaths
population_vars <- c("population", "population_density", "median_age", "aged_65_older", "aged_70_older",
"gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate", "diabetes_prevalence")
# 提取所选指标的数据
population_data <- select(owid_covid_data, location, date, total_deaths, all_of(population_vars))
# 处理缺失值：删除包含缺失值的行
population_data <- na.omit(population_data)
# 计算相关系数矩阵
cor_matrix <- cor(population_data[, population_vars])
# 将相关系数矩阵转换为长格式数据框
cor_data <- melt(cor_matrix)
# 绘制热力图
ggplot(data = cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(title = "Correlation Heatmap: Population Indicators vs. Total Deaths",
x = "Population Indicators",
y = "Population Indicators",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 选择与人口相关的指标和total_deaths
population_vars <- c("population", "population_density", "median_age", "aged_65_older", "aged_70_older",
"gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate", "diabetes_prevalence", "total_deaths")
# 提取所选指标的数据
population_data <- select(owid_covid_data, location, date, all_of(population_vars))
# 处理缺失值：删除包含缺失值的行
population_data <- na.omit(population_data)
# 计算相关系数矩阵
cor_matrix <- cor(population_data[, population_vars])
# 将相关系数矩阵转换为长格式数据框
cor_data <- melt(cor_matrix)
# 绘制热力图
ggplot(data = cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(title = "Correlation Heatmap: Population Indicators vs. Total Deaths",
x = "Variables",
y = "Variables",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
cor_matrix
# 选择与医疗资源相关的指标和total_deaths
healthcare_vars <- c("hospital_beds_per_thousand", "handwashing_facilities", "stringency_index", "total_deaths")
# 提取所选指标的数据
healthcare_data <- select(owid_covid_data, location, date, all_of(healthcare_vars))
# 处理缺失值：删除包含缺失值的行
healthcare_data <- na.omit(healthcare_data)
# 计算相关系数矩阵
cor_matrix <- cor(healthcare_data[, healthcare_vars])
# 将相关系数矩阵转换为长格式数据框
cor_data <- melt(cor_matrix)
# 绘制热力图
ggplot(data = cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient(low = "yellow", high = "red") +
labs(title = "Correlation Heatmap: Healthcare Indicators vs. Total Deaths",
x = "Variables",
y = "Variables",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 选择与人口相关的指标和total_deaths
population_vars <- c("population", "population_density", "median_age", "aged_65_older", "aged_70_older",
"gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate", "diabetes_prevalence", "total_deaths")
# 提取所选指标的数据
population_data <- select(owid_covid_data, location, date, all_of(population_vars))
# 处理缺失值：删除包含缺失值的行
population_data <- na.omit(population_data)
# 计算相关系数矩阵
cor_matrix <- cor(population_data[, population_vars])
# 将相关系数矩阵转换为长格式数据框
cor_data <- melt(cor_matrix)
# 绘制热力图
ggplot(data = cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), color = "black", size = 3) +  # 显示相关系数的数字
scale_fill_gradient(low = "yellow", high = "red") +
labs(title = "Correlation Heatmap: Population Indicators vs. Total Deaths",
x = "Variables",
y = "Variables",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 选择与医疗资源相关的指标和total_deaths
medical_vars <- c("total_deaths", "icu_patients", "icu_patients_per_million", "hosp_patients",
"hosp_patients_per_million", "weekly_icu_admissions", "weekly_icu_admissions_per_million",
"weekly_hosp_admissions", "weekly_hosp_admissions_per_million", "hospital_beds_per_thousand")
# 提取所选指标的数据
medical_data <- select(owid_covid_data, location, date, all_of(medical_vars))
# 处理缺失值：删除包含缺失值的行
medical_data <- na.omit(medical_data)
# 计算相关系数矩阵
cor_matrix <- cor(medical_data[, medical_vars])
# 绘制热力图
heatmap(cor_matrix,
Rowv = NA,
Colv = NA,
col = colorRampPalette(c("blue", "white", "red"))(100),
main = "Correlation Heatmap: Medical Resource Indicators vs. Total Deaths",
xlab = "Variables",
ylab = "Variables")
# 选择与医疗资源相关的指标和total_deaths
healthcare_vars <- c("icu_patients", "icu_patients_per_million", "hosp_patients", "hosp_patients_per_million",
"weekly_icu_admissions", "weekly_icu_admissions_per_million", "weekly_hosp_admissions",
"weekly_hosp_admissions_per_million", "hospital_beds_per_thousand", "total_deaths")
# 提取所选指标的数据
healthcare_data <- select(owid_covid_data, location, date, all_of(healthcare_vars))
# 处理缺失值：删除包含缺失值的行
healthcare_data <- na.omit(healthcare_data)
# 计算相关系数矩阵
cor_matrix <- cor(healthcare_data[, healthcare_vars])
# 将相关系数矩阵转换为长格式数据框
cor_data <- melt(cor_matrix)
# 绘制热力图
ggplot(data = cor_data, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
geom_text(aes(label = round(value, 2)), color = "black", size = 3) +  # 显示相关系数的数字
scale_fill_gradient(low = "yellow", high = "red") +
labs(title = "Correlation Heatmap: Healthcare Indicators vs. Total Deaths",
x = "Variables",
y = "Variables",
fill = "Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
cor_data
