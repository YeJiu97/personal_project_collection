# Additional visualizations (if desired)
# ...
# Reset the layout for plots
par(mfrow = c(1, 1))
# Bar plots with vertical labels
par(mfrow = c(2, 3))  # Set the layout for multiple plots
for (i in 1:ncol(categories_df)) {
barplot(table_data[[i]], main = names(table_data)[i], xlab = "", ylab = "Frequency", las = 2)  # Use las = 2 for vertical labels
}
# Reset the layout for plots
par(mfrow = c(1, 1))
# Descriptive statistics for categorical variables
summary(categories_df)
# Value distributions
table_data <- lapply(categories_df, table)
print(table_data)
# Bar plots
par(mfrow = c(2, 3))  # Set the layout for multiple plots
for (i in 1:ncol(categories_df)) {
barplot(table_data[[i]], main = names(table_data)[i], xlab = "", ylab = "Frequency")
}
# Increase plot size
par(mfrow = c(2, 3), mar = c(4, 4, 2, 1))  # Set the layout and margin
for (i in 1:ncol(categories_df)) {
barplot(table_data[[i]], main = names(table_data)[i], xlab = "", ylab = "Frequency", las = 2, cex.axis = 1.5)  # Adjust cex.axis for larger axis labels
}
# Reset the layout and margin
par(mfrow = c(1, 1), mar = c(5, 4, 4, 2) + 0.1)
par(mfrow = c(2, 3), mar = c(4, 4, 2, 1))  # Set the layout and margin
for (i in 1:ncol(categories_df)) {
barplot(table_data[[i]], main = names(table_data)[i], xlab = "", ylab = "Frequency", las = 2, cex.axis = 1.5)  # Adjust cex.axis for larger axis labels
}
# Reset the layout and margin
par(mfrow = c(1, 1), mar = c(5, 4, 4, 2) + 0.1)
# Descriptive statistics for numeric variables
summary(numeric_df)
# Histograms
par(mfrow = c(2, 2))  # Set the layout for multiple plots
for (i in 1:ncol(numeric_df)) {
hist(numeric_df[, i], main = names(numeric_df)[i], xlab = "Value", ylab = "Frequency")
}
# Box plots
par(mfrow = c(1, 1))  # Reset the layout for plots
boxplot(numeric_df, main = "Numeric Variables", xlab = "Variable", ylab = "Value")
# Descriptive statistics for numeric variables
summary(numeric_df)
# Value distributions
for (i in 1:ncol(numeric_df)) {
cat("Variable:", names(numeric_df)[i], "\n")
cat(table(numeric_df[, i]), "\n\n")
}
# Histograms
par(mfrow = c(2, 2))  # Set the layout for multiple plots
for (i in 1:ncol(numeric_df)) {
hist(numeric_df[, i], main = names(numeric_df)[i], xlab = "Value", ylab = "Frequency")
}
# Box plots
par(mfrow = c(1, 1))  # Reset the layout for plots
boxplot(numeric_df, main = "Numeric Variables", xlab = "Variable", ylab = "Value")
# Descriptive statistics for numeric variables
summary(numeric_df)
# Histograms
par(mfrow = c(2, 2))  # Set the layout for multiple plots
for (i in 1:ncol(numeric_df)) {
hist(numeric_df[, i], main = names(numeric_df)[i], xlab = "Value", ylab = "Frequency")
}
# Box plots
par(mfrow = c(1, 1))  # Reset the layout for plots
boxplot(numeric_df, main = "Numeric Variables", xlab = "Variable", ylab = "Value")
# Descriptive statistics for numeric variables
summary(numeric_df)
for (i in 1:ncol(numeric_df)) {
hist(numeric_df[, i], main = names(numeric_df)[i], xlab = "Value", ylab = "Frequency")
}
# Box plots
par(mfrow = c(1, 1))  # Reset the layout for plots
boxplot(numeric_df, main = "Numeric Variables", xlab = "Variable", ylab = "Value")
# Descriptive statistics for numeric variables
summary(numeric_df)
# Histograms
par(mfrow = c(2, 2))  # Set the layout for multiple plots
for (i in 1:ncol(numeric_df)) {
hist(numeric_df[, i], main = names(numeric_df)[i], xlab = "Value", ylab = "Frequency")
}
# Box plots
par(mfrow = c(1, 1))  # Reset the layout for plots
boxplot(numeric_df, main = "Numeric Variables", xlab = "Variable", ylab = "Value")
# Descriptive statistics for categorical variables
summary(categories_df)
# Value distributions
table_data <- lapply(categories_df, table)
print(table_data)
# Increase plot size
par(mfrow = c(2, 3), mar = c(4, 4, 2, 1))  # Set the layout and margin
for (i in 1:ncol(categories_df)) {
barplot(table_data[[i]], main = names(table_data)[i], xlab = "", ylab = "Frequency", las = 2, cex.axis = 1.5)  # Adjust cex.axis for larger axis labels
}
# Reset the layout and margin
par(mfrow = c(1, 1), mar = c(5, 4, 4, 2) + 0.1)
custom_summary <- function(data) {
# Calculate basic summary statistics
summary_stats <- summary(data)
# Calculate additional statistics
n <- nrow(data)
missing_values <- sum(is.na(data))
unique_values <- sapply(data, function(x) length(unique(x)))
skewness <- sapply(data, function(x) psych::skew(x, na.rm = TRUE))
kurtosis <- sapply(data, function(x) psych::kurtosi(x, na.rm = TRUE))
# Create a new summary dataframe
summary_df <- data.frame(
Min = summary_stats[1, ],
Q1 = summary_stats[2, ],
Median = summary_stats[3, ],
Mean = summary_stats[4, ],
Q3 = summary_stats[5, ],
Max = summary_stats[6, ],
Missing = missing_values,
Unique = unique_values,
Skewness = skewness,
Kurtosis = kurtosis
)
# Return the summary dataframe
return(summary_df)
}
# Call the custom summary function on your numeric dataframe
summary_result <- custom_summary(numeric_df)
# Value distributions
for (i in 1:ncol(numeric_df)) {
cat("Variable:", names(numeric_df)[i], "\n")
cat(table(numeric_df[, i]), "\n\n")
}
# Histograms
par(mfrow = c(2, 2))  # Set the layout for multiple plots
for (i in 1:ncol(numeric_df)) {
hist(numeric_df[, i], main = names(numeric_df)[i], xlab = "Value", ylab = "Frequency")
}
# Box plots
par(mfrow = c(1, 1))  # Reset the layout for plots
boxplot(numeric_df, main = "Numeric Variables", xlab = "Variable", ylab = "Value")
custom_summary <- function(data) {
# Calculate basic summary statistics
summary_stats <- summary(data)
# Calculate additional statistics
n <- nrow(data)
missing_values <- sum(is.na(data))
unique_values <- sapply(data, function(x) length(unique(x)))
skewness <- sapply(data, function(x) psych::skew(x, na.rm = TRUE))
kurtosis <- sapply(data, function(x) psych::kurtosi(x, na.rm = TRUE))
# Create a new summary dataframe
summary_df <- data.frame(
Min = summary_stats[1, ],
Q1 = summary_stats[2, ],
Median = summary_stats[3, ],
Mean = summary_stats[4, ],
Q3 = summary_stats[5, ],
Max = summary_stats[6, ],
Missing = missing_values,
Unique = unique_values,
Skewness = skewness,
Kurtosis = kurtosis
)
# Return the summary dataframe
return(summary_df)
}
# Call the custom summary function on your numeric dataframe
summary_result <- custom_summary(numeric_df)
# Value distributions
for (i in 1:ncol(numeric_df)) {
cat("Variable:", names(numeric_df)[i], "\n")
cat(table(numeric_df[, i]), "\n\n")
}
# Histograms
par(mfrow = c(2, 2))  # Set the layout for multiple plots
for (i in 1:ncol(numeric_df)) {
hist(numeric_df[, i], main = names(numeric_df)[i], xlab = "Value", ylab = "Frequency")
}
# Box plots
par(mfrow = c(1, 1))  # Reset the layout for plots
boxplot(numeric_df, main = "Numeric Variables", xlab = "Variable", ylab = "Value")
custom_summary <- function(data) {
# Calculate basic summary statistics
summary_stats <- summary(data)
# Calculate additional statistics
n <- nrow(data)
missing_values <- sum(is.na(data))
unique_values <- sapply(data, function(x) length(unique(x)))
skewness <- sapply(data, function(x) psych::skew(x, na.rm = TRUE))
kurtosis <- sapply(data, function(x) psych::kurtosi(x, na.rm = TRUE))
# Create a new summary dataframe
summary_df <- data.frame(
Min = summary_stats[1, ],
Q1 = summary_stats[2, ],
Median = summary_stats[3, ],
Mean = summary_stats[4, ],
Q3 = summary_stats[5, ],
Max = summary_stats[6, ],
Missing = missing_values,
Unique = unique_values,
Skewness = skewness,
Kurtosis = kurtosis
)
# Return the summary dataframe
return(summary_df)
}
# Call the custom summary function on your numeric dataframe
summary_result <- custom_summary(numeric_df)
summary_result
# Value distributions
for (i in 1:ncol(numeric_df)) {
cat("Variable:", names(numeric_df)[i], "\n")
cat(table(numeric_df[, i]), "\n\n")
}
# Histograms
par(mfrow = c(2, 2))  # Set the layout for multiple plots
for (i in 1:ncol(numeric_df)) {
hist(numeric_df[, i], main = names(numeric_df)[i], xlab = "Value", ylab = "Frequency")
}
# Box plots
par(mfrow = c(1, 1))  # Reset the layout for plots
boxplot(numeric_df, main = "Numeric Variables", xlab = "Variable", ylab = "Value")
knitr::opts_chunk$set(echo = TRUE)
# Read the CSV file into a data frame
heart_data <- read.csv("heart_features_selected.csv")
sapply(heart_data, class)
# Identify missing values represented as "nan", "none", or "null" (case-insensitive)
missing_values <- c("nan", "none", "null", "NA", "N/A")
missing_count <- sapply(heart_data, function(x) sum(toupper(x) %in% toupper(missing_values), na.rm = TRUE))
# Create a table to display the missing value count
missing_table <- data.frame(Feature = names(missing_count), Count = missing_count)
print(missing_table)
# Remove rows with missing values in restwm column
heart_data <- heart_data[heart_data$restwm != "none", ]
# Verify the changes
print(head(heart_data))
# Drop the "id" variable
heart_data <- heart_data[, -which(names(heart_data) == "id")]
# Convert variables to factor type
convert_vars <- c("sex", "cp", "exang", "restwm", "target")
heart_data[convert_vars] <- lapply(heart_data[convert_vars], as.factor)
str(heart_data)
# Subset categorical variables
categories_df <- heart_data[, sapply(heart_data, is.factor)]
# Subset numeric variables
numeric_df <- heart_data[, sapply(heart_data, is.numeric)]
# Descriptive statistics for categorical variables
summary(categories_df)
# Value distributions
table_data <- lapply(categories_df, table)
print(table_data)
# Increase plot size
par(mfrow = c(2, 3), mar = c(4, 4, 2, 1))  # Set the layout and margin
for (i in 1:ncol(categories_df)) {
barplot(table_data[[i]], main = names(table_data)[i], xlab = "", ylab = "Frequency", las = 2, cex.axis = 1.5)  # Adjust cex.axis for larger axis labels
}
# Reset the layout and margin
par(mfrow = c(1, 1), mar = c(5, 4, 4, 2) + 0.1)
custom_summary <- function(data) {
# Calculate basic summary statistics
summary_stats <- summary(data)
# Calculate additional statistics
n <- nrow(data)
missing_values <- sum(is.na(data))
unique_values <- sapply(data, function(x) length(unique(x)))
skewness <- sapply(data, function(x) psych::skew(x, na.rm = TRUE))
kurtosis <- sapply(data, function(x) psych::kurtosi(x, na.rm = TRUE))
# Create a new summary dataframe
summary_df <- data.frame(
Min = summary_stats[1, ],
Q1 = summary_stats[2, ],
Median = summary_stats[3, ],
Mean = summary_stats[4, ],
Q3 = summary_stats[5, ],
Max = summary_stats[6, ],
Missing = missing_values,
Unique = unique_values,
Skewness = skewness,
Kurtosis = kurtosis
)
# Return the summary dataframe
return(summary_df)
}
# Call the custom summary function on your numeric dataframe
summary_result <- custom_summary(numeric_df)
summary_result
# Value distributions
for (i in 1:ncol(numeric_df)) {
cat("Variable:", names(numeric_df)[i], "\n")
cat(table(numeric_df[, i]), "\n\n")
}
# Histograms
par(mfrow = c(2, 2))  # Set the layout for multiple plots
for (i in 1:ncol(numeric_df)) {
hist(numeric_df[, i], main = names(numeric_df)[i], xlab = "Value", ylab = "Frequency")
}
# Box plots
par(mfrow = c(1, 1))  # Reset the layout for plots
boxplot(numeric_df, main = "Numeric Variables", xlab = "Variable", ylab = "Value")
# Detect outliers in numeric variables
outliers <- sapply(numeric_df, function(x) {
lower <- quantile(x, probs = 0.25) - 1.5 * IQR(x)
upper <- quantile(x, probs = 0.75) + 1.5 * IQR(x)
x[x < lower | x > upper]
})
# Create a combined plot for outlier visualization
par(mfrow = c(2, 2))  # Set the layout for multiple plots
# Plot boxplots with outliers highlighted
for (i in 1:ncol(numeric_df)) {
boxplot(numeric_df[, i], main = names(numeric_df)[i], xlab = "Variable", ylab = "Value", outline = !is.null(outliers[[i]]))
}
# Reset the layout for plots
par(mfrow = c(1, 1))
# Identify rows with outliers in numeric variables
outlier_rows <- apply(sapply(numeric_df, function(x) {
lower <- quantile(x, probs = 0.25) - 1.5 * IQR(x)
upper <- quantile(x, probs = 0.75) + 1.5 * IQR(x)
x < lower | x > upper
}), 1, any)
# Remove rows with outliers from heart_data
heart_data <- heart_data[!outlier_rows, ]
# Verify the updated dataset
str(heart_data)
# Convert categorical variables to numeric representation
numeric_categories_df <- sapply(categories_df, as.numeric)
# Compute the correlation matrix
cor_matrix <- cor(numeric_categories_df)
# Display the correlation values
cor_matrix
library(corrplot)
# Convert categorical variables to numeric representation
numeric_categories_df <- sapply(categories_df, as.numeric)
# Compute the correlation matrix
cor_matrix <- cor(numeric_categories_df)
# Create a correlation matrix plot with values displayed in squares
corrplot(cor_matrix, method = "square", type = "upper", addCoef.col = "black")
cor_matrix <- cor(numeric_df)
library(corrplot)
corrplot(cor_matrix, method = "square", type = "upper", addCoef.col = "black")
cor_matrix
write.csv(heart_data, file = "features_prepare_for_modelling.csv", row.names = FALSE)
# Set the seed for reproducibility
set.seed(123)
# Split the data into training and testing sets
train_indices <- sample(1:nrow(heart_data), 0.7*nrow(heart_data))
train_data <- heart_data[train_indices, ]
test_data <- heart_data[-train_indices, ]
library(rpart)
# Fit the decision tree model
tree_model_01 <- rpart(target ~ ., data = train_data, method = "class")
# Print the details of the decision tree model
print(tree_model_01)
library(rpart.plot)
# Increase the size and resolution of the output image
png(file = "decision_tree_01.png", width = 1200, height = 800, res = 300)
# Plot the decision tree
rpart.plot(tree_model_01)
# Save and close the image
dev.off()
# Fit the decision tree model
tree_model_02 <- rpart(target ~ ., data = train_data, method = "class",  cp = 0)
# Print the details of the decision tree model
print(tree_model_02)
# Increase the size and resolution of the output image
png(file = "decision_tree_02.png", width = 1200, height = 800, res = 300)
# Plot the decision tree
rpart.plot(tree_model_02)
# Save and close the image
dev.off()
# Fit the decision tree model
tree_model_03 <- rpart(target ~ ., data = train_data, method = "class",  minsplit = 50)
# Print the details of the decision tree model
print(tree_model_03)
# Increase the size and resolution of the output image
png(file = "decision_tree_03.png", width = 1200, height = 800, res = 300)
# Plot the decision tree
rpart.plot(tree_model_03)
# Save and close the image
dev.off()
# Fit the decision tree model
tree_model_04 <- rpart(target ~ ., data = train_data, method = "class",  maxdepth = 4)
# Print the details of the decision tree model
print(tree_model_04)
# Increase the size and resolution of the output image
png(file = "decision_tree_04.png", width = 1200, height = 800, res = 300)
# Plot the decision tree
rpart.plot(tree_model_04)
# Save and close the image
dev.off()
# Calculate accuracy for tree_model_01
predictions_01 <- predict(tree_model_01, newdata = test_data, type = "class")
accuracy_01 <- sum(predictions_01 == test_data$target) / nrow(test_data)
cat("Accuracy for tree_model_01:", accuracy_01, "\n")
# Calculate accuracy for tree_model_02
predictions_02 <- predict(tree_model_02, newdata = test_data, type = "class")
accuracy_02 <- sum(predictions_02 == test_data$target) / nrow(test_data)
cat("Accuracy for tree_model_02:", accuracy_02, "\n")
# Calculate accuracy for tree_model_03
predictions_03 <- predict(tree_model_03, newdata = test_data, type = "class")
accuracy_03 <- sum(predictions_03 == test_data$target) / nrow(test_data)
cat("Accuracy for tree_model_03:", accuracy_03, "\n")
# Calculate accuracy for tree_model_04
predictions_04 <- predict(tree_model_04, newdata = test_data, type = "class")
accuracy_04 <- sum(predictions_04 == test_data$target) / nrow(test_data)
cat("Accuracy for tree_model_04:", accuracy_04, "\n")
# Calculate precision for tree_model_01
precision_01 <- sum(predictions_01 == "disease" & test_data$target == "disease") / sum(predictions_01 == "disease")
cat("Precision for tree_model_01:", precision_01, "\n")
# Calculate precision for tree_model_02
precision_02 <- sum(predictions_02 == "disease" & test_data$target == "disease") / sum(predictions_02 == "disease")
cat("Precision for tree_model_02:", precision_02, "\n")
# Calculate precision for tree_model_03
precision_03 <- sum(predictions_03 == "disease" & test_data$target == "disease") / sum(predictions_03 == "disease")
cat("Precision for tree_model_03:", precision_03, "\n")
# Calculate precision for tree_model_04
precision_04 <- sum(predictions_04 == "disease" & test_data$target == "disease") / sum(predictions_04 == "disease")
cat("Precision for tree_model_04:", precision_04, "\n")
# Calculate recall for tree_model_01
recall_01 <- sum(predictions_01 == "disease" & test_data$target == "disease") / sum(test_data$target == "disease")
cat("Recall for tree_model_01:", recall_01, "\n")
# Calculate recall for tree_model_02
recall_02 <- sum(predictions_02 == "disease" & test_data$target == "disease") / sum(test_data$target == "disease")
cat("Recall for tree_model_02:", recall_02, "\n")
# Calculate recall for tree_model_03
recall_03 <- sum(predictions_03 == "disease" & test_data$target == "disease") / sum(test_data$target == "disease")
cat("Recall for tree_model_03:", recall_03, "\n")
# Calculate recall for tree_model_04
recall_04 <- sum(predictions_04 == "disease" & test_data$target == "disease") / sum(test_data$target == "disease")
cat("Recall for tree_model_04:", recall_04, "\n")
# Calculate F-score for tree_model_01
f_score_01 <- 2 * (precision_01 * recall_01) / (precision_01 + recall_01)
cat("F-score for tree_model_01:", f_score_01, "\n")
# Calculate F-score for tree_model_02
f_score_02 <- 2 * (precision_02 * recall_02) / (precision_02 + recall_02)
cat("F-score for tree_model_02:", f_score_02, "\n")
# Calculate F-score for tree_model_03
f_score_03 <- 2 * (precision_03 * recall_03) / (precision_03 + recall_03)
cat("F-score for tree_model_03:", f_score_03, "\n")
# Calculate F-score for tree_model_04
f_score_04 <- 2 * (precision_04 * recall_04) / (precision_04 + recall_04)
cat("F-score for tree_model_04:", f_score_04, "\n")
library(caret)
# Make predictions on the test dataset
predictions_01 <- predict(tree_model_01, newdata = test_data, type = "class")
predictions_02 <- predict(tree_model_02, newdata = test_data, type = "class")
predictions_03 <- predict(tree_model_03, newdata = test_data, type = "class")
predictions_04 <- predict(tree_model_04, newdata = test_data, type = "class")
# Calculate confusion matrix for tree_model_01
confusion_matrix_01 <- confusionMatrix(predictions_01, test_data$target)
cat("Confusion Matrix for tree_model_01:\n")
print(confusion_matrix_01)
# Calculate confusion matrix for tree_model_02
confusion_matrix_02 <- confusionMatrix(predictions_02, test_data$target)
cat("Confusion Matrix for tree_model_02:\n")
print(confusion_matrix_02)
# Calculate confusion matrix for tree_model_03
confusion_matrix_03 <- confusionMatrix(predictions_03, test_data$target)
cat("Confusion Matrix for tree_model_03:\n")
print(confusion_matrix_03)
# Calculate confusion matrix for tree_model_04
confusion_matrix_04 <- confusionMatrix(predictions_04, test_data$target)
cat("Confusion Matrix for tree_model_04:\n")
print(confusion_matrix_04)
calculate_metrics <- function(confusion_matrix) {
# Calculate accuracy
accuracy <- confusion_matrix$overall['Accuracy']
# Calculate precision
precision <- confusion_matrix$byClass['Precision']
# Calculate F-score
f_score <- confusion_matrix$byClass['F1']
# Return the metrics
return(list(accuracy = accuracy, precision = precision, f_score = f_score))
}
# Calculate metrics for tree_model_01
metrics_01 <- calculate_metrics(confusion_matrix_01)
# Calculate metrics for tree_model_02
metrics_02 <- calculate_metrics(confusion_matrix_02)
# Calculate metrics for tree_model_03
metrics_03 <- calculate_metrics(confusion_matrix_03)
# Calculate metrics for tree_model_04
metrics_04 <- calculate_metrics(confusion_matrix_04)
# Print the metrics for each model
cat("Metrics for tree_model_01:\n")
print(metrics_01)
cat("Metrics for tree_model_02:\n")
print(metrics_02)
cat("Metrics for tree_model_03:\n")
print(metrics_03)
cat("Metrics for tree_model_04:\n")
print(metrics_04)
accuracy
library(pROC)
# Assuming your true target values are stored in a vector called "true_labels"
roc_obj_01 <- roc(test_data$target, as.numeric(predictions_01))
auc_value_01 <- auc(roc_obj_01)
auc_value_01
# Assuming your true target values are stored in a vector called "true_labels"
roc_obj_02 <- roc(test_data$target, as.numeric(predictions_02))
auc_value_02 <- auc(roc_obj_02)
auc_value_02
# Assuming your true target values are stored in a vector called "true_labels"
roc_obj_03 <- roc(test_data$target, as.numeric(predictions_03))
auc_value_03 <- auc(roc_obj_01)
auc_value_03
# Assuming your true target values are stored in a vector called "true_labels"
roc_obj_04 <- roc(test_data$target, as.numeric(predictions_04))
auc_value_04 <- auc(roc_obj_04)
auc_value_04
tree_model_01
tree_model_02
tree_model_03
tree_model_04
model_2
tree_model_02
